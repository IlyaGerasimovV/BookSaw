from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db import models
from django.contrib import messages
from django.core.exceptions import ValidationError
from simple_history.admin import SimpleHistoryAdmin
from import_export.admin import ImportExportModelAdmin
from .models import Book, Review, Genre, UserProfile, Message, UserActivity
from .resources import BookResource, ReviewResource, GenreResource, UserProfileResource, MessageResource


class ReviewInline(admin.TabularInline):
    """–ò–Ω–ª–∞–π–Ω –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ –∫–Ω–∏–≥"""
    model = Review
    extra = 0
    readonly_fields = ('created_at', 'rating_stars')
    fields = ('user', 'rating', 'rating_stars', 'text', 'created_at')
    
    def rating_stars(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"""
        if obj.rating:
            return "‚òÖ" * obj.rating + "‚òÜ" * (5 - obj.rating)
        return "-"
    rating_stars.short_description = "–†–µ–π—Ç–∏–Ω–≥"


class MessageInline(admin.TabularInline):
    """–ò–Ω–ª–∞–π–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω–∫–µ –∫–Ω–∏–≥"""
    model = Message
    extra = 0
    readonly_fields = ('created_at', 'sender_link', 'recipient_link')
    fields = ('sender_link', 'recipient_link', 'subject', 'is_read', 'created_at')
    
    def sender_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        if obj.sender:
            url = reverse('admin:auth_user_change', args=[obj.sender.id])
            return format_html('<a href="{}">{}</a>', url, obj.sender.username)
        return "-"
    sender_link.short_description = "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
    
    def recipient_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        if obj.recipient:
            url = reverse('admin:auth_user_change', args=[obj.recipient.id])
            return format_html('<a href="{}">{}</a>', url, obj.recipient.username)
        return "-"
    recipient_link.short_description = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"


@admin.register(Genre)
class GenreAdmin(SimpleHistoryAdmin, ImportExportModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∂–∞–Ω—Ä–æ–≤"""
    resource_class = GenreResource
    
    list_display = ['name', 'books_count', 'created_books_link']
    search_fields = ['name']
    list_filter = ['name']
    ordering = ['name']
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π
    fields = ['name']
    
    # –ò—Å—Ç–æ—Ä–∏—è
    history_list_display = ['name']
    
    def books_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –∂–∞–Ω—Ä–µ"""
        count = obj.book_set.count()
        if count > 0:
            url = reverse('admin:books_book_changelist') + f'?genres__id__exact={obj.id}'
            return format_html('<a href="{}" style="color: green; font-weight: bold;">{}</a>', url, count)
        return format_html('<span style="color: red;">0</span>')
    books_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥'
    books_count.admin_order_field = 'book_count'
    
    def created_books_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å —ç—Ç–∏–º –∂–∞–Ω—Ä–æ–º"""
        url = reverse('admin:books_book_add') + f'?genres={obj.id}'
        return format_html('<a href="{}" class="addlink">–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É</a>', url)
    created_books_link.short_description = '–î–µ–π—Å—Ç–≤–∏—è'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return super().get_queryset(request).annotate(
            book_count=models.Count('book')  # –ò–∑–º–µ–Ω–∏—Ç—å admin.Count –Ω–∞ models.Count
        )


@admin.register(Book)
class BookAdmin(SimpleHistoryAdmin, ImportExportModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–Ω–∏–≥"""
    resource_class = BookResource
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    list_display = [
        'title', 'author', 'owner_link', 'genres_display', 
        'average_rating_display', 'reviews_count', 'has_file_display', 
        'created_at_short', 'book_actions'
    ]
    
    list_filter = [
        'genres', 'created_at', 'owner', 
        ('book_file', admin.EmptyFieldListFilter),
        ('cover_image', admin.EmptyFieldListFilter)
    ]
    
    search_fields = ['title', 'author', 'description', 'owner__username']
    
    filter_horizontal = ['genres']
    
    readonly_fields = ['created_at', 'updated_at', 'average_rating_display', 'file_info']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'author', 'description')
        }),
        ('–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è', {
            'fields': ('genres',),
            'classes': ('wide',)
        }),
        ('–§–∞–π–ª—ã', {
            'fields': ('cover_image', 'book_file', 'file_info'),
            'classes': ('collapse',)
        }),
        ('–í–ª–∞–¥–µ–ª–µ—Ü –∏ –¥–∞—Ç—ã', {
            'fields': ('owner', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('average_rating_display',),
            'classes': ('collapse',)
        })
    )
    
    # –ò–Ω–ª–∞–π–Ω—ã
    inlines = [ReviewInline, MessageInline]
    
    # –ò—Å—Ç–æ—Ä–∏—è
    history_list_display = ['title', 'author', 'owner']
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞
    list_per_page = 25
    list_max_show_all = 100
    
    def owner_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–Ω–∏–≥–∏"""
        url = reverse('admin:auth_user_change', args=[obj.owner.id])
        return format_html(
            '<a href="{}" style="color: blue;">{}</a>', 
            url, 
            obj.owner.get_full_name() or obj.owner.username
        )
    owner_link.short_description = '–í–ª–∞–¥–µ–ª–µ—Ü'
    owner_link.admin_order_field = 'owner__username'
    
    def genres_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤"""
        genres = obj.genres.all()[:3]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        if genres:
            genre_links = []
            for genre in genres:
                url = reverse('admin:books_genre_change', args=[genre.id])
                genre_links.append(f'<a href="{url}">{genre.name}</a>')
            result = ', '.join(genre_links)
            if obj.genres.count() > 3:
                result += f' <span style="color: gray;">+{obj.genres.count() - 3}</span>'
            return mark_safe(result)
        return "-"
    genres_display.short_description = '–ñ–∞–Ω—Ä—ã'
    
    def average_rating_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        rating = obj.average_rating()
        if rating > 0:
            stars = "‚òÖ" * int(rating) + "‚òÜ" * (5 - int(rating))
            color = "green" if rating >= 4 else "orange" if rating >= 3 else "red"
            return format_html(
                '<span style="color: {};">{} ({})</span>', 
                color, stars, rating
            )
        return format_html('<span style="color: gray;">–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫</span>')
    average_rating_display.short_description = '–†–µ–π—Ç–∏–Ω–≥'
    
    def reviews_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        count = obj.reviews.count()
        if count > 0:
            url = reverse('admin:books_review_changelist') + f'?book__id__exact={obj.id}'
            return format_html('<a href="{}">{}</a>', url, count)
        return "0"
    reviews_count.short_description = '–û—Ç–∑—ã–≤—ã'

    def has_file_boolean(self, obj):
        """–ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏ (boolean –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)"""
        return bool(obj.book_file)
    has_file_boolean.boolean = True
    has_file_boolean.short_description = '–§–∞–π–ª (bool)'

    def has_file_display(self, obj):
        """–ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏"""
        if obj.book_file:
            return format_html(
                '<span style="color: green; font-weight: bold;">‚úì –ï—Å—Ç—å</span>'
            )
        return format_html('<span style="color: red;">‚úó –ù–µ—Ç</span>')
    has_file_display.short_description = '–§–∞–π–ª'
    
    def created_at_short(self, obj):
        """–ö—Ä–∞—Ç–∫–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        return obj.created_at.strftime('%d.%m.%Y')
    created_at_short.short_description = '–°–æ–∑–¥–∞–Ω–∞'
    created_at_short.admin_order_field = 'created_at'
    
    def file_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ"""
        if obj.book_file:
            try:
                size = obj.book_file.size
                size_mb = round(size / (1024 * 1024), 2)
                return f"–†–∞–∑–º–µ—Ä: {size_mb} –ú–ë"
            except:
                return "–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    file_info.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ'
    
    def book_actions(self, obj):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        actions = []
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ —Å–∞–π—Ç–µ
        view_url = obj.get_absolute_url()
        actions.append(f'<a href="{view_url}" target="_blank" title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ">üëÅ</a>')
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        review_url = reverse('admin:books_review_add') + f'?book={obj.id}'
        actions.append(f'<a href="{review_url}" title="–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤">üìù</a>')
        
        return mark_safe(' | '.join(actions))
    book_actions.short_description = '–î–µ–π—Å—Ç–≤–∏—è'
    
    def save_model(self, request, obj, form, change):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        try:
            if change:
                obj._change_reason = f"–ò–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {request.user.username}"
            else:
                obj._change_reason = f"–°–æ–∑–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {request.user.username}"
            super().save_model(request, obj, form, change)
            if change:
                messages.success(request, f'–ö–Ω–∏–≥–∞ "{obj.title}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.')
            else:
                messages.success(request, f'–ö–Ω–∏–≥–∞ "{obj.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.')
        except ValidationError as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}')
            raise
        except Exception as e:
            messages.error(request, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}')
            raise


@admin.register(Review)
class ReviewAdmin(SimpleHistoryAdmin, ImportExportModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
    resource_class = ReviewResource
    
    list_display = [
        'book_link', 'user_link', 'rating_display', 
        'text_preview', 'created_at_short'
    ]
    
    list_filter = ['rating', 'created_at', 'book__genres']
    
    search_fields = ['book__title', 'user__username', 'text']
    
    readonly_fields = ['created_at']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
    fieldsets = (
        ('–û—Ç–∑—ã–≤', {
            'fields': ('book', 'user', 'rating', 'text')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        })
    )
    
    # –ò—Å—Ç–æ—Ä–∏—è
    history_list_display = ['book', 'user', 'rating']
    
    def book_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É"""
        url = reverse('admin:books_book_change', args=[obj.book.id])
        return format_html('<a href="{}">{}</a>', url, obj.book.title)
    book_link.short_description = '–ö–Ω–∏–≥–∞'
    book_link.admin_order_field = 'book__title'
    
    def user_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = reverse('admin:auth_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.username)
    user_link.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    user_link.admin_order_field = 'user__username'
    
    def rating_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        stars = "‚òÖ" * obj.rating + "‚òÜ" * (5 - obj.rating)
        color = "green" if obj.rating >= 4 else "orange" if obj.rating >= 3 else "red"
        return format_html('<span style="color: {};">{}</span>', color, stars)
    rating_display.short_description = '–†–µ–π—Ç–∏–Ω–≥'
    rating_display.admin_order_field = 'rating'
    
    def text_preview(self, obj):
        """–ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
        if len(obj.text) > 50:
            return obj.text[:50] + "..."
        return obj.text
    text_preview.short_description = '–¢–µ–∫—Å—Ç'
    
    def created_at_short(self, obj):
        """–ö—Ä–∞—Ç–∫–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        return obj.created_at.strftime('%d.%m.%Y %H:%M')
    created_at_short.short_description = '–î–∞—Ç–∞'
    created_at_short.admin_order_field = 'created_at'


@admin.register(UserProfile)
class UserProfileAdmin(SimpleHistoryAdmin, ImportExportModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    resource_class = UserProfileResource
    
    list_display = [
        'user_link', 'full_name', 'location', 'has_avatar', 
        'books_count', 'reviews_count', 'contact_info'
    ]
    
    list_filter = [
        'location', 
        ('avatar', admin.EmptyFieldListFilter),
        ('phone', admin.EmptyFieldListFilter)
    ]
    
    search_fields = ['user__username', 'user__first_name', 'user__last_name', 'location']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
    fieldsets = (
        ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
            'fields': ('user',)
        }),
        ('–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('bio', 'location', 'birth_date', 'avatar')
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç—ã', {
            'fields': ('phone', 'telegram'),
            'classes': ('collapse',)
        })
    )
    
    # –ò—Å—Ç–æ—Ä–∏—è
    history_list_display = ['user', 'location']
    
    def user_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = reverse('admin:auth_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.username)
    user_link.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    user_link.admin_order_field = 'user__username'
    
    def full_name(self, obj):
        """–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return obj.user.get_full_name() or obj.user.username
    full_name.short_description = '–ü–æ–ª–Ω–æ–µ –∏–º—è'

    def has_avatar_boolean(self, obj):
        """–ù–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (boolean –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)"""
        return bool(obj.avatar)

    has_avatar_boolean.boolean = True
    has_avatar_boolean.short_description = '–ê–≤–∞—Ç–∞—Ä (bool)'

    def has_avatar(self, obj):
        """–ù–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
        if obj.avatar:
            return format_html('<span style="color: green;">‚úì</span>')
        return format_html('<span style="color: red;">‚úó</span>')
    has_avatar.short_description = '–ê–≤–∞—Ç–∞—Ä'
    
    def books_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        count = obj.user.book_set.count()
        if count > 0:
            url = reverse('admin:books_book_changelist') + f'?owner__id__exact={obj.user.id}'
            return format_html('<a href="{}">{}</a>', url, count)
        return "0"
    books_count.short_description = '–ö–Ω–∏–≥–∏'
    
    def reviews_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        count = obj.user.review_set.count()
        if count > 0:
            url = reverse('admin:books_review_changelist') + f'?user__id__exact={obj.user.id}'
            return format_html('<a href="{}">{}</a>', url, count)
        return "0"
    reviews_count.short_description = '–û—Ç–∑—ã–≤—ã'
    
    def contact_info(self, obj):
        """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        contacts = []
        if obj.phone:
            contacts.append(f"üìû {obj.phone}")
        if obj.telegram:
            contacts.append(f"üì± {obj.telegram}")
        return " | ".join(contacts) if contacts else "-"
    contact_info.short_description = '–ö–æ–Ω—Ç–∞–∫—Ç—ã'


@admin.register(Message)
class MessageAdmin(SimpleHistoryAdmin, ImportExportModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    resource_class = MessageResource
    
    list_display = [
        'sender_link', 'recipient_link', 'book_link', 
        'subject', 'is_read_display', 'created_at_short'
    ]
    
    list_filter = ['is_read', 'created_at', 'book__genres']
    
    search_fields = ['sender__username', 'recipient__username', 'subject', 'message']
    
    readonly_fields = ['created_at']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
    fieldsets = (
        ('–£—á–∞—Å—Ç–Ω–∏–∫–∏', {
            'fields': ('sender', 'recipient', 'book')
        }),
        ('–°–æ–æ–±—â–µ–Ω–∏–µ', {
            'fields': ('subject', 'message', 'is_read')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        })
    )
    
    # –ò—Å—Ç–æ—Ä–∏—è
    history_list_display = ['sender', 'recipient', 'subject', 'is_read']
    
    def sender_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        url = reverse('admin:auth_user_change', args=[obj.sender.id])
        return format_html('<a href="{}">{}</a>', url, obj.sender.username)
    sender_link.short_description = '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'
    sender_link.admin_order_field = 'sender__username'
    
    def recipient_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        url = reverse('admin:auth_user_change', args=[obj.recipient.id])
        return format_html('<a href="{}">{}</a>', url, obj.recipient.username)
    recipient_link.short_description = '–ü–æ–ª—É—á–∞—Ç–µ–ª—å'
    recipient_link.admin_order_field = 'recipient__username'
    
    def book_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É"""
        url = reverse('admin:books_book_change', args=[obj.book.id])
        return format_html('<a href="{}">{}</a>', url, obj.book.title)
    book_link.short_description = '–ö–Ω–∏–≥–∞'
    book_link.admin_order_field = 'book__title'

    def is_read_boolean(self, obj):
        """–°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è (boolean –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)"""
        return obj.is_read
    is_read_boolean.boolean = True
    is_read_boolean.short_description = '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ (bool)'


    def is_read_display(self, obj):
        """–°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è"""
        if obj.is_read:
            return format_html('<span style="color: green;">‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ</span>')
        return format_html('<span style="color: red;">‚úó –ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ</span>')
    is_read_display.short_description = '–°—Ç–∞—Ç—É—Å'

    
    def created_at_short(self, obj):
        """–ö—Ä–∞—Ç–∫–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        return obj.created_at.strftime('%d.%m.%Y %H:%M')
    created_at_short.short_description = '–î–∞—Ç–∞'
    created_at_short.admin_order_field = 'created_at'


@admin.register(UserActivity)
class UserActivityAdmin(SimpleHistoryAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    list_display = [
        'user_link', 'action_display', 'object_info', 
        'ip_address', 'timestamp_short'
    ]
    
    list_filter = ['action', 'object_type', 'timestamp']
    
    search_fields = ['user__username', 'description', 'ip_address']
    
    readonly_fields = ['timestamp', 'user_agent_short']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
    fieldsets = (
        ('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', {
            'fields': ('user', 'action', 'object_type', 'object_id', 'description')
        }),
        ('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('ip_address', 'user_agent_short', 'timestamp'),
            'classes': ('collapse',)
        })
    )
    
    # –ò—Å—Ç–æ—Ä–∏—è
    history_list_display = ['user', 'action', 'object_type']
    
    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        return False
    
    def user_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = reverse('admin:auth_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.username)
    user_link.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    user_link.admin_order_field = 'user__username'
    
    def action_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        action_colors = {
            'create_book': 'green',
            'update_book': 'blue',
            'delete_book': 'red',
            'create_review': 'purple',
            'send_message': 'orange',
        }
        color = action_colors.get(obj.action, 'black')
        return format_html(
            '<span style="color: {};">{}</span>', 
            color, 
            obj.get_action_display()
        )
    action_display.short_description = '–î–µ–π—Å—Ç–≤–∏–µ'
    action_display.admin_order_field = 'action'
    
    def object_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ"""
        if obj.object_type and obj.object_id:
            return f"{obj.object_type} #{obj.object_id}"
        return "-"
    object_info.short_description = '–û–±—ä–µ–∫—Ç'
    
    def timestamp_short(self, obj):
        """–ö—Ä–∞—Ç–∫–æ–µ –≤—Ä–µ–º—è"""
        return obj.timestamp.strftime('%d.%m.%Y %H:%M')
    timestamp_short.short_description = '–í—Ä–µ–º—è'
    timestamp_short.admin_order_field = 'timestamp'
    
    def user_agent_short(self, obj):
        """–ö—Ä–∞—Ç–∫–∏–π User Agent"""
        if obj.user_agent:
            return obj.user_agent[:100] + "..." if len(obj.user_agent) > 100 else obj.user_agent
        return "-"
    user_agent_short.short_description = 'User Agent'
